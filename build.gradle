plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'my'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// spring dependencies
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'	

	// junit dependencies
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// logstash dependencies
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

	// json dependencies
	implementation 'org.json:json:20231013'

	// commons-io dependencies
	implementation 'commons-io:commons-io:2.15.1'

	// guava dependencies
	implementation 'com.google.guava:guava:32.0.0-android'

	// imaging dependencies
	implementation 'org.apache.commons:commons-imaging:1.0.0-alpha5'

	//database dependencies
	runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
  	useJUnitPlatform()

	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.10"
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required = true
		html.required = true
	}
}

jacocoTestCoverageVerification {
	dependsOn test

	violationRules {
		rule {
			element = 'CLASS'
			limit {
				counter = 'CLASS'
				value = 'COVEREDRATIO'
				minimum = 1.0
				excludes = [
					"my.photomanager.MyPhotoManager",
					"my.photomanager.PhotoManagerException",
					"my.photomanager.web.PhotoDTO"
					]
			}
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.90
				excludes = [
					"my.photomanager.MyPhotoManager",
					"my.photomanager.PhotoManagerException",
					"my.photomanager.web.PhotoDTO"
					]
			}
		}
	}
}

bootBuildImage{
	imageName = "8u3631984/my-photomanager:${version}"
	publish = true
	docker {
		publishRegistry{
			username = "8u363"
			password = System.getenv("DOCKER_HUB_KEY")
		}
	}
}
